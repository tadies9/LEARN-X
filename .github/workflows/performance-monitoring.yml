name: Performance Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '10'
        type: string

env:
  NODE_VERSION: '20.x'

jobs:
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Load historical performance data
        id: historical
        run: |
          mkdir -p performance-history
          if [ -f "performance-history/latest.json" ]; then
            echo "historical_data_exists=true" >> $GITHUB_OUTPUT
            echo "Historical performance data found"
          else
            echo "historical_data_exists=false" >> $GITHUB_OUTPUT
            echo "No historical performance data found"
          fi

      - name: Run performance monitoring
        working-directory: ./backend
        run: |
          export MONITOR_ENVIRONMENT="${{ inputs.environment || 'staging' }}"
          export MONITOR_DURATION="${{ inputs.duration || '10' }}"
          npm run monitor:performance
        env:
          MONITORING_API_KEY: ${{ secrets.MONITORING_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Analyze performance trends
        id: analysis
        run: |
          cd backend
          npm run analyze:performance-trends
          
          # Check for performance degradation
          if [ -f "performance-analysis/degradation-detected.flag" ]; then
            echo "degradation_detected=true" >> $GITHUB_OUTPUT
            echo "performance_status=degraded" >> $GITHUB_OUTPUT
          else
            echo "degradation_detected=false" >> $GITHUB_OUTPUT
            echo "performance_status=stable" >> $GITHUB_OUTPUT
          fi

      - name: Generate performance dashboard
        run: |
          cd backend
          npm run generate:performance-dashboard
          
          # Upload to monitoring service
          curl -X POST "${{ secrets.MONITORING_DASHBOARD_URL }}/api/upload" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_KEY }}" \
            -F "dashboard=@performance-dashboard/index.html"

      - name: Alert on performance degradation
        if: steps.analysis.outputs.degradation_detected == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            // Create GitHub issue for performance degradation
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Performance Degradation Detected',
              body: `
              ## Performance Alert
              
              Performance degradation has been detected in the ${{ inputs.environment || 'staging' }} environment.
              
              **Detection Time**: ${new Date().toISOString()}
              **Environment**: ${{ inputs.environment || 'staging' }}
              **Monitoring Duration**: ${{ inputs.duration || '10' }} minutes
              
              ## Recommended Actions
              
              1. Review recent deployments
              2. Check system resource utilization
              3. Analyze error logs
              4. Consider scaling adjustments
              
              ## Performance Data
              
              Detailed performance data is available in the [monitoring dashboard](${{ secrets.MONITORING_DASHBOARD_URL }}).
              
              This issue was automatically created by the performance monitoring workflow.
              `,
              labels: ['performance', 'alert', 'monitoring']
            });
            
            console.log('Created performance alert issue:', issue.data.number);

      - name: Send Slack notification
        if: steps.analysis.outputs.degradation_detected == 'true'
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚨 Performance Degradation Alert",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚨 Performance Degradation Detected"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ inputs.environment || 'staging' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ steps.analysis.outputs.performance_status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Detection Time:*\n$(date)"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Dashboard"
                      },
                      "url": "${{ secrets.MONITORING_DASHBOARD_URL }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }'

      - name: Update performance history
        run: |
          cd backend
          mkdir -p performance-history
          
          # Archive current results
          timestamp=$(date +%Y%m%d_%H%M%S)
          cp performance-results/summary.json "performance-history/${timestamp}.json"
          cp performance-results/summary.json performance-history/latest.json
          
          # Cleanup old history files (keep last 100)
          ls -t performance-history/*.json | tail -n +101 | xargs -r rm

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance-monitoring-${{ github.run_number }}
          path: |
            backend/performance-results/
            backend/performance-analysis/
            backend/performance-dashboard/
          retention-days: 30

  performance-comparison:
    name: Performance Comparison
    runs-on: ubuntu-latest
    needs: performance-monitoring
    if: always()
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download current performance data
        uses: actions/download-artifact@v3
        with:
          name: performance-monitoring-${{ github.run_number }}
          path: current-performance/

      - name: Download historical performance data
        uses: actions/download-artifact@v3
        with:
          name: performance-monitoring-${{ github.run_number - 1 }}
          path: previous-performance/
        continue-on-error: true

      - name: Generate performance comparison report
        run: |
          mkdir -p comparison-report
          
          if [ -f "previous-performance/performance-results/summary.json" ]; then
            # Compare with previous run
            node -e "
              const current = require('./current-performance/performance-results/summary.json');
              const previous = require('./previous-performance/performance-results/summary.json');
              
              const comparison = {
                current_timestamp: current.timestamp,
                previous_timestamp: previous.timestamp,
                improvements: [],
                regressions: [],
                stable_metrics: []
              };
              
              // Compare key metrics
              const metrics = ['response_time_p95', 'throughput', 'error_rate', 'cpu_usage', 'memory_usage'];
              
              metrics.forEach(metric => {
                const currentValue = current.metrics[metric];
                const previousValue = previous.metrics[metric];
                
                if (currentValue && previousValue) {
                  const changePercent = ((currentValue - previousValue) / previousValue) * 100;
                  
                  if (Math.abs(changePercent) < 5) {
                    comparison.stable_metrics.push({
                      metric,
                      current: currentValue,
                      previous: previousValue,
                      change: changePercent
                    });
                  } else if (
                    (metric === 'error_rate' && changePercent < -10) ||
                    (metric !== 'error_rate' && changePercent > 10)
                  ) {
                    comparison.regressions.push({
                      metric,
                      current: currentValue,
                      previous: previousValue,
                      change: changePercent
                    });
                  } else {
                    comparison.improvements.push({
                      metric,
                      current: currentValue,
                      previous: previousValue,
                      change: changePercent
                    });
                  }
                }
              });
              
              require('fs').writeFileSync('comparison-report/comparison.json', JSON.stringify(comparison, null, 2));
            "
            
            echo "Performance comparison completed"
          else
            echo "No previous performance data available for comparison"
            echo '{"message": "No previous data available"}' > comparison-report/comparison.json
          fi

      - name: Comment comparison on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('comparison-report/comparison.json')) {
              const comparison = JSON.parse(fs.readFileSync('comparison-report/comparison.json', 'utf8'));
              
              if (comparison.message) {
                return; // No comparison data available
              }
              
              let comment = `## 📊 Performance Comparison Report\n\n`;
              comment += `**Current Run**: ${comparison.current_timestamp}\n`;
              comment += `**Previous Run**: ${comparison.previous_timestamp}\n\n`;
              
              if (comparison.regressions.length > 0) {
                comment += `### ⚠️ Performance Regressions (${comparison.regressions.length})\n`;
                comparison.regressions.forEach(r => {
                  comment += `- **${r.metric}**: ${r.current} (${r.change > 0 ? '+' : ''}${r.change.toFixed(1)}%)\n`;
                });
                comment += '\n';
              }
              
              if (comparison.improvements.length > 0) {
                comment += `### ✅ Performance Improvements (${comparison.improvements.length})\n`;
                comparison.improvements.forEach(i => {
                  comment += `- **${i.metric}**: ${i.current} (${i.change > 0 ? '+' : ''}${i.change.toFixed(1)}%)\n`;
                });
                comment += '\n';
              }
              
              if (comparison.stable_metrics.length > 0) {
                comment += `### 📈 Stable Metrics (${comparison.stable_metrics.length})\n`;
                comparison.stable_metrics.forEach(s => {
                  comment += `- **${s.metric}**: ${s.current} (${s.change > 0 ? '+' : ''}${s.change.toFixed(1)}%)\n`;
                });
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Upload comparison report
        uses: actions/upload-artifact@v3
        with:
          name: performance-comparison-${{ github.run_number }}
          path: comparison-report/
          retention-days: 7