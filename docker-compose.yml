services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL= # Let it use REDIS_HOST/PORT instead
      - PYTHON_FILE_PROCESSING=true # Enable Python service for file processing
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/src:/app/src
      - ./backend/.env:/app/.env
    networks:
      - learn-x-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL= # Let it use REDIS_HOST/PORT instead
      - PYTHON_FILE_PROCESSING=true # Enable Python service for file processing
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - learn-x-network
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: npm run start:worker

  python-ai:
    build:
      context: ./python-ai-service
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - PYTHONUNBUFFERED=1
      - DOCKER_CLIENT_TIMEOUT=120
      - COMPOSE_HTTP_TIMEOUT=120
    env_file:
      - ./python-ai-service/.env
    volumes:
      - ./python-ai-service:/app
      - /app/.venv # Exclude virtual environment
    networks:
      - learn-x-network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - learn-x-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

networks:
  learn-x-network:
    driver: bridge

volumes:
  redis-data: